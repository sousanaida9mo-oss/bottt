from __future__ import annotations

import io
import time
from dataclasses import dataclass
from typing import Callable, Dict, Optional

from aiogram import F, Router, types
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

router = Router(name="reply_send_html")

# ================= –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è (email –∏ –∞–¥—Ä–µ—Å–∞—Ç) =================
_EmailSender = Callable[[int, str, str, str], bool]
_email_sender: Optional[_EmailSender] = None

def set_email_sender(sender: _EmailSender) -> None:
    """
    sender(user_id, to_email, subject, html_body) -> bool
    """
    global _email_sender
    _email_sender = sender

# (chat_id, incoming_message_id) -> email
_REPLY_CTX: Dict[tuple[int, int], str] = {}

def set_reply_context(chat_id: int, incoming_message_id: int, to_email: str) -> None:
    _REPLY_CTX[(chat_id, incoming_message_id)] = to_email

# ================= –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∏ FSM =================
def cancel_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üö´ –û—Ç–º–µ–Ω–∞", callback_data="reply:cancel")]
    ])

class ReplyHTMLFSM(StatesGroup):
    wait_html = State()

@dataclass
class Flow:
    src_mid: int = 0
    to_email: str = ""

# ================= Helpers =================
def _files_from_html(html: str, base: str) -> tuple[types.BufferedInputFile, types.BufferedInputFile]:
    ts = int(time.time())
    txt = types.BufferedInputFile((html or "").encode("utf-8"), filename=f"{base}_{ts}.txt")
    htm = types.BufferedInputFile((html or "").encode("utf-8"), filename=f"{base}_{ts}.html")
    return txt, htm

async def _read_txt_document_as_text(m: types.Message) -> Optional[str]:
    if not m.document:
        return None
    name = (m.document.file_name or "").lower()
    if not (name.endswith(".txt") or (m.document.mime_type or "").startswith("text/plain")):
        return None
    buf = io.BytesIO()
    await m.bot.download(m.document, destination=buf)
    raw = buf.getvalue()
    try:
        return raw.decode("utf-8")
    except UnicodeDecodeError:
        return raw.decode("latin-1", errors="replace")

# ================= Handlers =================
# –ö–Ω–æ–ø–∫–∞ ‚Äúüì© –û—Ç–ø—Ä–∞–≤–∏—Ç—å HTML‚Äù –¥–æ–ª–∂–Ω–∞ –∏–º–µ—Ç—å callback_data = f"reply:html:start:{incoming_mid}"
@router.callback_query(F.data.startswith("reply:html:start:"))
async def start_html_reply(c: types.CallbackQuery, state: FSMContext):
    src_mid = int(c.data.split(":")[3])
    to_email = _REPLY_CTX.get((c.message.chat.id, src_mid), "")
    await state.update_data(flow=Flow(src_mid=src_mid, to_email=to_email).__dict__)
    await c.message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ HTML-—Ä–∞–∑–º–µ—Ç–∫—É —Ç–µ–∫—Å—Ç–æ–º –∏–ª–∏ .txt —Ñ–∞–π–ª–æ–º:", reply_markup=cancel_kb())
    await state.set_state(ReplyHTMLFSM.wait_html)
    await c.answer()

@router.callback_query(F.data == "reply:cancel")
async def cancel_reply(c: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await c.message.answer("–û—Ç–º–µ–Ω–µ–Ω–æ.")
    await c.answer()

# –ü—Ä–∏–Ω–∏–º–∞–µ–º .txt –¥–æ–∫—É–º–µ–Ω—Ç
@router.message(ReplyHTMLFSM.wait_html, F.document)
async def got_html_file(m: types.Message, state: FSMContext):
    text = await _read_txt_document_as_text(m)
    if text is None:
        await m.answer("–ù—É–∂–µ–Ω .txt —Ñ–∞–π–ª —Å HTML-—Ä–∞–∑–º–µ—Ç–∫–æ–π (text/plain). –ü—Ä–∏—à–ª–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–º –∏–ª–∏ .txt.", reply_markup=cancel_kb())
        return
    await _finalize_send(m, state, html=text)

# –ò–ª–∏ –ø—Ä–∏–Ω–∏–º–∞–µ–º —Ç–µ–∫—Å—Ç–æ–º
@router.message(ReplyHTMLFSM.wait_html, F.text)
async def got_html_text(m: types.Message, state: FSMContext):
    html = (m.text or "").strip()
    if not html:
        await m.answer("–ü—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç. –ü—Ä–∏—à–ª–∏—Ç–µ HTML-—Ä–∞–∑–º–µ—Ç–∫—É –∏–ª–∏ .txt —Ñ–∞–π–ª.", reply_markup=cancel_kb())
        return
    await _finalize_send(m, state, html=html)

async def _finalize_send(m: types.Message, state: FSMContext, html: str):
    data = await state.get_data()
    flow = Flow(**data.get("flow", {}))
    src_mid = flow.src_mid
    to_email = flow.to_email

    # 1) –ü—É–±–ª–∏–∫—É–µ–º —à–∞–±–ª–æ–Ω –≤ —á–∞—Ç –≤ –≤–∏–¥–µ .txt (–∫–∞–∫ ‚Äú–ø–µ—Ä–µ—Å–ª–∞–ª–∏ —à–∞–±–ª–æ–Ω –≤ —á–∞—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏‚Äù)
    txtf, htmlf = _files_from_html(html, "template")
    await m.answer_document(txtf, caption="–®–∞–±–ª–æ–Ω (TXT)")

    # 2) –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email (–µ—Å–ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ)
    ok = False
    if _email_sender and to_email:
        try:
            ok = bool(_email_sender(m.from_user.id, to_email, "HTML-Template", html))
        except Exception:
            ok = False

    # 3) –õ–æ–≥ –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ –≤—Ö–æ–¥—è—â–µ–µ + –ø—Ä–∏–∫–ª–∞–¥—ã–≤–∞–µ–º .html
    caption = (
        f"–û—Ç–≤–µ—Ç —Å HTML-–≤–ª–æ–∂–µ–Ω–∏–µ–º —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {to_email}"
        if ok and to_email
        else (f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å HTML –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {to_email}" if to_email else "HTML –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω (email –Ω–µ —É–∫–∞–∑–∞–Ω)")
    )
    try:
        await m.bot.send_document(
            chat_id=m.chat.id,
            document=htmlf,
            caption=caption,
            reply_to_message_id=src_mid
        )
    except Exception:
        _, htmlf2 = _files_from_html(html, "template")
        await m.bot.send_document(
            chat_id=m.chat.id,
            document=htmlf2,
            caption=caption,
            reply_to_message_id=src_mid
        )

    await state.clear()